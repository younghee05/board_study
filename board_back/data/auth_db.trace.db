2024-08-26 17:39:43 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "VALUES", expected count: "1"; SQL statement:
INSERT INTO ROLE VALUES(DEFAULT, 'ROLE_USER'), VALUES(DEFAULT, 'ROLE_MANAGER'), VALUES(DEFAULT, 'ROLE_ADMIN') [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.addParameter(Function.java:653)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readKeywordFunction(Parser.java:4101)
	at org.h2.command.Parser.readTerm(Parser.java:4429)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1881)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:97)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:75)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
	at com.study.SpringSecurityMybatis.SpringSecurityMybatisApplication.main(SpringSecurityMybatisApplication.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2024-08-26 17:40:13 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "VALUES", expected count: "1"; SQL statement:
INSERT INTO ROLE VALUES(DEFAULT, 'ROLE_USER'), VALUES(DEFAULT, 'ROLE_MANAGER'), VALUES(DEFAULT, 'ROLE_ADMIN') [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.addParameter(Function.java:653)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readKeywordFunction(Parser.java:4101)
	at org.h2.command.Parser.readTerm(Parser.java:4429)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.parseValuesForCommand(Parser.java:1881)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1817)
	at org.h2.command.Parser.parseInsert(Parser.java:1749)
	at org.h2.command.Parser.parsePrepared(Parser.java:954)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:212)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:97)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:75)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
	at com.study.SpringSecurityMybatis.SpringSecurityMybatisApplication.main(SpringSecurityMybatisApplication.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2024-08-27 14:56:45 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT
            U.ID AS USER_ID,
            U.USERNAME,
            U.PASSWORD,
            U.NAME,
            UR.ID AS USER_ROLES_ID,
            UR.USER_ID AS UR_USER_ID,
            UR.ROLE_ID AS UR_ROLE_ID
            R[*].ID AS ROLE_ID,
            R.NAME AS ROLE_NAME
        FROM
            USER U
            LEFT OUTER JOIN USER_ROLES UR ON(UR.USER_ID = U.ID)
            LEFT OUTER JOIN ROLE R ON(R.ID = UR.ROLE_ID)
        WHERE
            USERNAME = ?"; SQL statement:
select
            u.id as user_id,
            u.username,
            u.password,
            u.name,
            ur.id as user_roles_id,
            ur.user_id as ur_user_id,
            ur.role_id as ur_role_id
            r.id as role_id,
            r.name as role_name
        from
            user u
            left outer join user_roles ur on(ur.user_id = u.id)
            left outer join role r on(r.id = ur.role_id)
        where
            username = ? [42000-200]
2024-08-27 16:26:06 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DELETE
        FORM
            USER_ROLES[*]
        WHERE
            USER_ID = ?"; expected "., FROM"; SQL statement:
delete
        form
            user_roles
        where
            user_id = ? [42001-200]
2024-08-27 16:58:43 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DELETE
        FORM
            USER_ROLES[*]
        WHERE
            USER_ID = ?"; expected "., FROM"; SQL statement:
delete
        form
            user_roles
        where
            user_id = ? [42001-200]
2024-09-04 08:56:45 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/security/SpringMybatise/data/auth_db.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.lambda$logDataSources$0(H2ConsoleAutoConfiguration.java:77)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.logDataSources(H2ConsoleAutoConfiguration.java:83)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.h2Console(H2ConsoleAutoConfiguration.java:70)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:638)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:212)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:203)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:97)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:260)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5219)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:835)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:263)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:432)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:927)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:486)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:478)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:182)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:160)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:577)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
	at com.study.SpringSecurityMybatis.SpringSecurityMybatisApplication.main(SpringSecurityMybatisApplication.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/security/SpringMybatise/data/auth_db.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 106 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/security/SpringMybatise/data/auth_db.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:172)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 100 more
2024-09-04 10:24:41 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DESC[*] OAUTH2_USER"; expected "DELETE, DROP, DECLARE, DEALLOCATE"; SQL statement:
desc oauth2_user [42001-200]
2024-09-04 10:24:47 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DESCRIBE[*] OAUTH2_USER"; expected "DELETE, DROP, DECLARE, DEALLOCATE"; SQL statement:
describe oauth2_user [42001-200]
2024-09-04 10:36:03 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "OAUTH2" not found; SQL statement:
TRUNCATE TABLE OAUTH2 USER [42102-200]
2024-09-05 16:03:06 database: flush
org.h2.message.DbException: General error: "java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/board/board_back/data/auth_db.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.message.DbException.convert(DbException.java:347)
	at org.h2.mvstore.db.MVTableEngine$1.uncaughtException(MVTableEngine.java:93)
	at org.h2.mvstore.MVStore.handleException(MVStore.java:2877)
	at org.h2.mvstore.MVStore.panic(MVStore.java:481)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:402)
	at org.h2.mvstore.MVStore$Builder.open(MVStore.java:3579)
	at org.h2.mvstore.db.MVTableEngine$Store.open(MVTableEngine.java:170)
	at org.h2.mvstore.db.MVTableEngine.init(MVTableEngine.java:103)
	at org.h2.engine.Database.getPageStore(Database.java:2659)
	at org.h2.engine.Database.open(Database.java:675)
	at org.h2.engine.Database.openDatabase(Database.java:307)
	at org.h2.engine.Database.<init>(Database.java:301)
	at org.h2.engine.Engine.openSession(Engine.java:74)
	at org.h2.engine.Engine.openSession(Engine.java:192)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:171)
	at org.h2.engine.Engine.createSession(Engine.java:166)
	at org.h2.engine.Engine.createSession(Engine.java:29)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:340)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:173)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:561)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.lambda$logDataSources$0(H2ConsoleAutoConfiguration.java:77)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
	at java.base/java.util.stream.SortedOps$RefSortingSink.end(SortedOps.java:395)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.Sink$ChainedReference.end(Sink.java:258)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
	at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.logDataSources(H2ConsoleAutoConfiguration.java:83)
	at org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration.h2Console(H2ConsoleAutoConfiguration.java:70)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:653)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:638)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1352)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1195)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:582)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:213)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:212)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.getOrderedBeansOfType(ServletContextInitializerBeans.java:203)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.addServletContextInitializerBeans(ServletContextInitializerBeans.java:97)
	at org.springframework.boot.web.servlet.ServletContextInitializerBeans.<init>(ServletContextInitializerBeans.java:86)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.getServletContextInitializerBeans(ServletWebServerApplicationContext.java:260)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.selfInitialize(ServletWebServerApplicationContext.java:234)
	at org.springframework.boot.web.embedded.tomcat.TomcatStarter.onStartup(TomcatStarter.java:53)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5219)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:835)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1396)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1386)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:919)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:263)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:432)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:927)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:486)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:123)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:104)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:478)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:211)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:182)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:160)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:577)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
	at com.study.SpringSecurityMybatis.SpringSecurityMybatisApplication.main(SpringSecurityMybatisApplication.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: General error: "java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/board/board_back/data/auth_db.mv.db [1.4.200/7]" [50000-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:505)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 106 more
Caused by: java.lang.IllegalStateException: The file is locked: nio:C:/sqf-kyh/board/board_back/data/auth_db.mv.db [1.4.200/7]
	at org.h2.mvstore.DataUtils.newIllegalStateException(DataUtils.java:950)
	at org.h2.mvstore.FileStore.open(FileStore.java:172)
	at org.h2.mvstore.MVStore.<init>(MVStore.java:381)
	... 100 more
2024-09-06 11:50:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE BOARD ADD[*] COLUMN VIEW_COUNT INT NOT NULL DEFAULT 0"; SQL statement:
CREATE TABLE BOARD ADD COLUMN view_count INT NOT NULL DEFAULT 0 [42000-200]
2024-09-06 11:52:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE BOARD ADD[*] COLUMN VIEW_COUNT INT NOT NULL DEFAULT 0"; SQL statement:
CREATE TABLE BOARD ADD COLUMN view_count INT NOT NULL DEFAULT 0 [42000-200]
2024-09-06 12:18:16 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
insert into board
        values (default, ?, ?, ?); [21002-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.command.dml.Insert.prepare(Insert.java:319)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:1154)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:344)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:81)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:194)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy91.save(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.writeBoard(BoardService.java:24)
	at com.study.SpringSecurityMybatis.controller.BoardController.write(BoardController.java:23)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.study.SpringSecurityMybatis.aspect.ValidAspect.around(ValidAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$123b1194.write(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-06 12:20:41 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Duplicate column name "VIEW_COUNT"; SQL statement:
ALTER TABLE BOARD ADD COLUMN view_count INT NOT NULL DEFAULT 0 [42121-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.setColumns(Table.java:446)
	at org.h2.table.TableBase.<init>(TableBase.java:75)
	at org.h2.table.RegularTable.<init>(RegularTable.java:126)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:113)
	at org.h2.mvstore.db.MVTableEngine$Store.createTable(MVTableEngine.java:253)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:127)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:41)
	at org.h2.schema.Schema.createTable(Schema.java:697)
	at org.h2.command.ddl.AlterTableAlterColumn.cloneTableStructure(AlterTableAlterColumn.java:414)
	at org.h2.command.ddl.AlterTableAlterColumn.copyData(AlterTableAlterColumn.java:301)
	at org.h2.command.ddl.AlterTableAlterColumn.update(AlterTableAlterColumn.java:210)
	at org.h2.command.CommandContainer.update(CommandContainer.java:198)
	at org.h2.command.Command.executeUpdate(Command.java:251)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)
	at com.zaxxer.hikari.pool.ProxyStatement.execute(ProxyStatement.java:94)
	at com.zaxxer.hikari.pool.HikariProxyStatement.execute(HikariProxyStatement.java)
	at org.springframework.jdbc.datasource.init.ScriptUtils.executeSqlScript(ScriptUtils.java:261)
	at org.springframework.jdbc.datasource.init.ResourceDatabasePopulator.populate(ResourceDatabasePopulator.java:254)
	at org.springframework.jdbc.datasource.init.DatabasePopulatorUtils.execute(DatabasePopulatorUtils.java:54)
	at org.springframework.boot.jdbc.init.DataSourceScriptDatabaseInitializer.runScripts(DataSourceScriptDatabaseInitializer.java:90)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.runScripts(AbstractScriptDatabaseInitializer.java:145)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applyScripts(AbstractScriptDatabaseInitializer.java:107)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.applySchemaScripts(AbstractScriptDatabaseInitializer.java:97)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.initializeDatabase(AbstractScriptDatabaseInitializer.java:75)
	at org.springframework.boot.sql.init.AbstractScriptDatabaseInitializer.afterPropertiesSet(AbstractScriptDatabaseInitializer.java:65)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1863)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:620)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:953)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:145)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:740)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:415)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:303)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1312)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1301)
	at com.study.SpringSecurityMybatis.SpringSecurityMybatisApplication.main(SpringSecurityMybatisApplication.java:10)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2024-09-06 12:31:45 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
insert into board
        values (default, ?, ?, ?); [21002-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.command.dml.Insert.prepare(Insert.java:319)
	at org.h2.command.Parser.prepareCommand(Parser.java:744)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:1154)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:344)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:81)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:49)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:194)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:181)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy91.save(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.writeBoard(BoardService.java:24)
	at com.study.SpringSecurityMybatis.controller.BoardController.write(BoardController.java:23)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:89)
	at com.study.SpringSecurityMybatis.aspect.ValidAspect.around(ValidAspect.java:55)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:634)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:624)
	at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:72)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:175)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$87c4b18.write(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:681)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-06 15:31:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE BOARD_LIKE([*]"; expected "identifier"; SQL statement:
CREATE TABLE board_like( [42001-200]
2024-09-06 17:29:03 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM BOARD 
SELECT[*] * FROM  BOARD_LIKE"; SQL statement:
SELECT * FROM BOARD 
SELECT * FROM  BOARD_LIKE [42000-200]
2024-09-09 09:23:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE COMMENT ([*]"; expected "identifier"; SQL statement:
CREATE TABLE COMMENT ( [42001-200]
2024-09-09 09:24:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE COMMENT ([*]"; expected "identifier"; SQL statement:
CREATE TABLE COMMENT ( [42001-200]
2024-09-09 10:43:04 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM COMMENT
ORDER BY 
IF[*](PARENT_ID = 0, ID, PARENT_ID)"; expected "=, NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select * from comment
order by 
if(parent_id = 0, id, parent_id) [42001-200]
2024-09-09 10:43:35 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM COMMENT
ORDER BY 
IF[*](PARENT_ID = 0, ID, PARENT_ID)"; expected "=, NOT, EXISTS, INTERSECTS, UNIQUE"; SQL statement:
select * from comment
order by 
if(parent_id = 0, id, parent_id) [42001-200]
2024-09-09 11:11:11 jdbc[25]: null
org.h2.message.DbException: The connection was not closed by the application and is garbage collected [90018-200]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:726)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:712)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException: The connection was not closed by the application and is garbage collected [90018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 18 more
2024-09-09 11:13:10 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO COMMENT
VALUE[*](DEFAULT, 1, 0, 'aaaa', 1, NOW())"; expected "., (, DIRECT, SORTED, DEFAULT, VALUES, SET, (, WITH, SELECT, TABLE, VALUES"; SQL statement:
insert into comment
value(default, 1, 0, 'aaaa', 1, now()) [42001-200]
2024-09-09 11:14:09 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO COMMENT
VALUE[*](DEFAULT, 1, 0, 'aaaa', 1, NOW())"; expected "., (, DIRECT, SORTED, DEFAULT, VALUES, SET, (, WITH, SELECT, TABLE, VALUES"; SQL statement:
insert into comment
value(default, 1, 0, 'aaaa', 1, now()) [42001-200]
2024-09-09 11:14:45 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO COMMENT
VALUE[*](DEFAULT, 1, 0, ""aaaa"", 1, NOW())"; expected "., (, DIRECT, SORTED, DEFAULT, VALUES, SET, (, WITH, SELECT, TABLE, VALUES"; SQL statement:
insert into comment
value(default, 1, 0, "aaaa", 1, now()) [42001-200]
2024-09-09 11:15:20 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into comment
value(1, 0, aaaa[*]', 1, now());

select * from comment;"; SQL statement:
insert into comment
value(1, 0, aaaa', 1, now());

select * from comment; [42000-200]
2024-09-09 11:15:24 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into comment
value(1, 0, aaaa[*]', 1, now());

select * from comment;"; SQL statement:
insert into comment
value(1, 0, aaaa', 1, now());

select * from comment; [42000-200]
2024-09-09 11:15:36 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into comment
value(default, 1, 0, aaaa[*]', 1, now());

select * from comment;"; SQL statement:
insert into comment
value(default, 1, 0, aaaa', 1, now());

select * from comment; [42000-200]
2024-09-09 11:15:38 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into comment
value(default, 1, 0, aaaa[*]', 1, now());

select * from comment;"; SQL statement:
insert into comment
value(default, 1, 0, aaaa', 1, now());

select * from comment; [42000-200]
2024-09-09 11:15:48 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO COMMENT
VALUE[*](1, 0, 'aaaa', 1, NOW())"; expected "., (, DIRECT, SORTED, DEFAULT, VALUES, SET, (, WITH, SELECT, TABLE, VALUES"; SQL statement:
insert into comment
value(1, 0, 'aaaa', 1, now()) [42001-200]
2024-09-09 11:16:41 jdbc[14]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO COMMENT
VALUE[*](DEFAULT,1, 0, 'aaaa', 1, NOW())"; expected "., (, DIRECT, SORTED, DEFAULT, VALUES, SET, (, WITH, SELECT, TABLE, VALUES"; SQL statement:
insert into comment
value(default,1, 0, 'aaaa', 1, now()) [42001-200]
2024-09-09 12:42:35 jdbc[65]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "CMMENT" not found; SQL statement:
truncate table cmment [42102-200]
2024-09-09 13:08:50 jdbc[66]: null
org.h2.message.DbException: The connection was not closed by the application and is garbage collected [90018-200]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:138)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:364)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:206)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:476)
	at com.zaxxer.hikari.pool.HikariPool.access$100(HikariPool.java:71)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:726)
	at com.zaxxer.hikari.pool.HikariPool$PoolEntryCreator.call(HikariPool.java:712)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
	at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException: The connection was not closed by the application and is garbage collected [90018-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:622)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	... 18 more
2024-09-09 15:32:00 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                CAST(ID AS VARCHAR(255)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', C.ID) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID =[*] # BOARDID 
            ORDER BY
                PATH"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                CAST(id AS VARCHAR(255)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', c.id) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = # boardId 
            ORDER BY
                path [42000-200]
2024-09-09 15:32:03 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                CAST(ID AS VARCHAR(255)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', C.ID) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID =[*] # BOARDID 
            ORDER BY
                PATH"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                CAST(id AS VARCHAR(255)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', c.id) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = # boardId 
            ORDER BY
                path [42000-200]
2024-09-09 15:33:16 jdbc[13]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                CAST(ID AS VARCHAR(255)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', C.ID) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID =[*] # BOARDID 
            ORDER BY
                PATH"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                CAST(id AS VARCHAR(255)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', c.id) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = # boardId 
            ORDER BY
                path [42000-200]
2024-09-10 09:17:14 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:14 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:17 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:18 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:23 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:23 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:26 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:27 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:17:27 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:18:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:18:08 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:18:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:19:09 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 09:19:09 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255),[*]5,0)) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON C.PARENT_ID = CT.ID
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            WHERE
                CT.BOARD_ID = ?
            ORDER BY
                PATH;"; expected "FOR, UNSIGNED, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255),5,0)) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON c.parent_id = ct.id
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            where
                ct.board_id = ?
            ORDER BY
                path; [42001-200]
2024-09-10 15:36:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:36:31 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:36:34 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:36:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:25 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:37:57 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:38:24 jdbc[5]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:38:25 jdbc[6]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:40:24 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:41:01 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:41:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:41:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "WITH RECURSIVE COMMENT_TREE(ID, BOARD_ID, PARENT_ID, CONTENT, WRITER_ID, CREATE_DATE, LEVEL, PATH) AS (
            SELECT
                ID,
                BOARD_ID,
                PARENT_ID,
                CONTENT,
                WRITER_ID,
                CREATE_DATE,
                0 AS LEVEL,
                LPAD(CAST(ID AS VARCHAR(255)),5,0) AS PATH
            FROM
                COMMENT
            WHERE
                PARENT_ID IS NULL
                AND BOARD_ID = ?

            UNION ALL

            SELECT
                C.ID,
                C.BOARD_ID,
                C.PARENT_ID,
                C.CONTENT,
                C.WRITER_ID,
                C.CREATE_DATE,
                CT.LEVEL + 1,
                CONCAT(CT.PATH, ',', LPAD(C.ID, 5, 0)) AS PATH
            FROM
                COMMENT C
                JOIN COMMENT_TREE CT ON (C.PARENT_ID = CT.ID)
            WHERE
                AND C[*].BOARD_ID = ?
            )

            SELECT
                CT.ID,
                CT.BOARD_ID AS BOARDID,
                CT.PARENT_ID AS PARENTID,
                CT.CONTENT,
                CT.WRITER_ID AS WRITERID,
                CT.CREATE_DATE AS CREATEDATE,
                CT.LEVEL,
                U.USERNAME,
                U.IMG
            FROM
                COMMENT_TREE CT
                LEFT OUTER JOIN USER U ON(U.ID = CT.WRITER_ID)
            ORDER BY
                CT.PATH;"; expected "(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, _LOCAL_AND_GLOBAL_, OR, GROUP, HAVING, WINDOW, QUALIFY, UNION, EXCEPT, MINUS, INTERSECT, ORDER, OFFSET, FETCH, LIMIT, SAMPLE_SIZE, FOR, )"; SQL statement:
WITH RECURSIVE comment_tree(id, board_id, parent_id, content, writer_id, create_date, level, path) AS (
            SELECT
                id,
                board_id,
                parent_id,
                content,
                writer_id,
                create_date,
                0 AS level,
                LPAD(CAST(id AS VARCHAR(255)),5,0) AS path
            FROM
                comment
            WHERE
                parent_id IS NULL
                and board_id = ?

            UNION ALL

            SELECT
                c.id,
                c.board_id,
                c.parent_id,
                c.content,
                c.writer_id,
                c.create_date,
                ct.level + 1,
                CONCAT(ct.path, ',', LPAD(c.id, 5, 0)) AS path
            FROM
                comment c
                JOIN comment_tree ct ON (c.parent_id = ct.id)
            where
                and c.board_id = ?
            )

            SELECT
                ct.id,
                ct.board_id as boardId,
                ct.parent_id as parentId,
                ct.content,
                ct.writer_id as writerId,
                ct.create_date as createDate,
                ct.level,
                u.username,
                u.img
            FROM
                comment_tree ct
                left outer join user u on(u.id = ct.writer_id)
            ORDER BY
                ct.path; [42001-200]
2024-09-10 15:50:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TRIGGER BEFORE_DELETE_COMMENT BEFORE DELETE ON COMMENT FOR EACH ROW BEGIN[*] DELETE FROM COMMENT WHERE PARENT_ID = OLD.ID END"; expected "QUEUE, NOWAIT, AS, CALL"; SQL statement:
CREATE TRIGGER before_delete_comment BEFORE DELETE ON comment FOR EACH ROW BEGIN delete from comment where parent_id = old.id END [42001-200]
2024-09-19 10:44:01 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "IFNULL", expected count: "1"; SQL statement:
with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
             
                and (
                    b.title like concat("%", trim(ifnull(?), "")), "%")
                    or u.username like concat("%", trim(ifnull(?), "")), "%")
                )
             
             
             










        order by
            b.id desc
        limit ?, ? [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.doneWithParameters(Function.java:2578)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3966)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3883)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3122)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseWithQuery(Parser.java:6800)
	at org.h2.command.Parser.parseWith1(Parser.java:6752)
	at org.h2.command.Parser.parseWith(Parser.java:6722)
	at org.h2.command.Parser.parseWithStatementOrQuery(Parser.java:2633)
	at org.h2.command.Parser.parsePrepared(Parser.java:872)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy92.findAllBySearch(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.getSearchBoard(BoardService.java:54)
	at com.study.SpringSecurityMybatis.controller.BoardController.getSearchBoard(BoardController.java:30)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$6ff2bec3.getSearchBoard(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-19 10:44:11 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "IFNULL", expected count: "1"; SQL statement:
with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
             
                and (
                    b.title like concat("%", trim(ifnull(?), "")), "%")
                    or u.username like concat("%", trim(ifnull(?), "")), "%")
                )
             
             
             










        order by
            b.id desc
        limit ?, ? [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.doneWithParameters(Function.java:2578)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3966)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3883)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3122)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseWithQuery(Parser.java:6800)
	at org.h2.command.Parser.parseWith1(Parser.java:6752)
	at org.h2.command.Parser.parseWith(Parser.java:6722)
	at org.h2.command.Parser.parseWithStatementOrQuery(Parser.java:2633)
	at org.h2.command.Parser.parsePrepared(Parser.java:872)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy92.findAllBySearch(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.getSearchBoard(BoardService.java:54)
	at com.study.SpringSecurityMybatis.controller.BoardController.getSearchBoard(BoardController.java:30)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$6ff2bec3.getSearchBoard(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-19 10:44:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "IFNULL", expected count: "1"; SQL statement:
with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
             
                and (
                    b.title like concat("%", trim(ifnull(?), "")), "%")
                    or u.username like concat("%", trim(ifnull(?), "")), "%")
                )
             
             
             










        order by
            b.id desc
        limit ?, ? [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.doneWithParameters(Function.java:2578)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3966)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3883)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3122)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseWithQuery(Parser.java:6800)
	at org.h2.command.Parser.parseWith1(Parser.java:6752)
	at org.h2.command.Parser.parseWith(Parser.java:6722)
	at org.h2.command.Parser.parseWithStatementOrQuery(Parser.java:2633)
	at org.h2.command.Parser.parsePrepared(Parser.java:872)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy92.findAllBySearch(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.getSearchBoard(BoardService.java:54)
	at com.study.SpringSecurityMybatis.controller.BoardController.getSearchBoard(BoardController.java:30)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$b2222021.getSearchBoard(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-19 10:52:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "IFNULL", expected count: "1"; SQL statement:
with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
             
                and (
                    b.title like concat('%', trim(ifnull(?), "")), '%')
                    or u.username like concat('%', trim(ifnull(?), "")), '%')
                )
             
             
             










        order by
            b.id desc
        limit ?, ? [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.doneWithParameters(Function.java:2578)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3966)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3883)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3122)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseWithQuery(Parser.java:6800)
	at org.h2.command.Parser.parseWith1(Parser.java:6752)
	at org.h2.command.Parser.parseWith(Parser.java:6722)
	at org.h2.command.Parser.parseWithStatementOrQuery(Parser.java:2633)
	at org.h2.command.Parser.parsePrepared(Parser.java:872)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy92.findAllBySearch(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.getSearchBoard(BoardService.java:54)
	at com.study.SpringSecurityMybatis.controller.BoardController.getSearchBoard(BoardController.java:30)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$c98bd1d.getSearchBoard(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
2024-09-19 10:53:25 jdbc[4]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Invalid parameter count for "IFNULL", expected count: "1"; SQL statement:
with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
             
                and (
                    b.title like concat('%', trim(ifnull(?), '')), '%')
                    or u.username like concat('%', trim(ifnull(?), '')), '%')
                )
             
             
             










        order by
            b.id desc
        limit ?, ? [7001-200]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:453)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.expression.function.Function.doneWithParameters(Function.java:2578)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3966)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3883)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readFunctionParameters(Parser.java:3962)
	at org.h2.command.Parser.readFunction(Parser.java:3772)
	at org.h2.command.Parser.readTerm(Parser.java:4305)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3122)
	at org.h2.command.Parser.readExpression(Parser.java:3059)
	at org.h2.command.Parser.readTerm(Parser.java:4344)
	at org.h2.command.Parser.readFactor(Parser.java:3343)
	at org.h2.command.Parser.readSum(Parser.java:3330)
	at org.h2.command.Parser.readConcat(Parser.java:3305)
	at org.h2.command.Parser.readCondition(Parser.java:3108)
	at org.h2.command.Parser.readExpressionWithGlobalConditions(Parser.java:3048)
	at org.h2.command.Parser.parseSelect(Parser.java:2962)
	at org.h2.command.Parser.parseQuerySub(Parser.java:2817)
	at org.h2.command.Parser.parseSelectUnion(Parser.java:2649)
	at org.h2.command.Parser.parseWithQuery(Parser.java:6800)
	at org.h2.command.Parser.parseWith1(Parser.java:6752)
	at org.h2.command.Parser.parseWith(Parser.java:6722)
	at org.h2.command.Parser.parseWithStatementOrQuery(Parser.java:2633)
	at org.h2.command.Parser.parsePrepared(Parser.java:872)
	at org.h2.command.Parser.parse(Parser.java:843)
	at org.h2.command.Parser.parse(Parser.java:815)
	at org.h2.command.Parser.prepareCommand(Parser.java:738)
	at org.h2.engine.Session.prepareLocal(Session.java:657)
	at org.h2.engine.Session.prepareCommand(Session.java:595)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1235)
	at org.h2.jdbc.JdbcPreparedStatement.<init>(JdbcPreparedStatement.java:76)
	at org.h2.jdbc.JdbcConnection.prepareStatement(JdbcConnection.java:352)
	at com.zaxxer.hikari.pool.ProxyConnection.prepareStatement(ProxyConnection.java:337)
	at com.zaxxer.hikari.pool.HikariProxyConnection.prepareStatement(HikariProxyConnection.java)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.instantiateStatement(PreparedStatementHandler.java:86)
	at org.apache.ibatis.executor.statement.BaseStatementHandler.prepare(BaseStatementHandler.java:88)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.prepare(RoutingStatementHandler.java:59)
	at org.apache.ibatis.executor.SimpleExecutor.prepareStatement(SimpleExecutor.java:87)
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:62)
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:325)
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:156)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:109)
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:89)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:151)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:145)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:140)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:427)
	at com.sun.proxy.$Proxy76.selectList(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224)
	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:145)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86)
	at com.sun.proxy.$Proxy92.findAllBySearch(Unknown Source)
	at com.study.SpringSecurityMybatis.service.BoardService.getSearchBoard(BoardService.java:54)
	at com.study.SpringSecurityMybatis.controller.BoardController.getSearchBoard(BoardController.java:30)
	at com.study.SpringSecurityMybatis.controller.BoardController$$FastClassBySpringCGLIB$$50318faa.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:783)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:753)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:698)
	at com.study.SpringSecurityMybatis.controller.BoardController$$EnhancerBySpringCGLIB$$63a127d0.getSearchBoard(<generated>)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:205)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:150)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:117)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:895)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:808)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1067)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:963)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:655)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:764)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:227)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:327)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:115)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:122)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:126)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:81)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:109)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:149)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at com.study.SpringSecurityMybatis.security.filter.JwtAccessTokenFilter.doFilter(JwtAccessTokenFilter.java:58)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:219)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:213)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:178)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:103)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:89)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:110)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:80)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:55)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:336)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:211)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:183)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:354)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:267)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:117)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:189)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:162)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:197)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:97)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:135)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:78)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:360)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:399)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:889)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1743)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.base/java.lang.Thread.run(Thread.java:834)
