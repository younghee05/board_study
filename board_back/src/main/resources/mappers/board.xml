<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.study.SpringSecurityMybatis.repository.BoardMapper">

    <resultMap id="boardResultMap" type="com.study.SpringSecurityMybatis.entity.Board">
        <id property="id" column="board_id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="userId" column="user_id" />
        <result property="viewCount" column="view_count" />
        <association property="user" resultMap="userResultMap" />
    </resultMap>

    <resultMap id="userResultMap" type="com.study.SpringSecurityMybatis.entity.User">
        <id property="id" column="u_user_id" />
        <result property="username" column="username" />
    </resultMap>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into board
        values (default, #{title}, #{content}, #{userId}, default);
    </insert>

    <update id="modifyViewCountById">
        update board
        set
            view_count = view_count + 1
        where
            id = #{id}
    </update>

    <select id="findById" resultMap="boardResultMap">
        select
            b.id as board_id,
            b.title,
            b.content,
            b.user_id,
            b.view_count,
            u.id as u_user_id,
            u.username
        from
            board b
            left outer join user u on(u.id = b.user_id)
        where
            b.id = #{id};
    </select>
    <select id="findAllByStartIndexAndLimit" resultType="com.study.SpringSecurityMybatis.entity.BoardList">
        with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
        )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        order by
            b.id desc
        limit #{startIndex}, #{limit}

    </select>
    <select id="getCountAll" resultType="java.lang.Integer">
        select
            count(*)
        from
            board
    </select>
    <select id="findAllBySearch" resultType="com.study.SpringSecurityMybatis.entity.BoardList">
        with like_count as (
            select
                board_id,
                count(*) as like_cnt
            from
                board_like
            group by
                board_id
            )

        select
            b.id,
            b.title,
            b.content,
            u.username as writerName,
            ifnull(lc.like_cnt, 0) as likeCount,
            b.view_count as viewCount
        from
            board b
            left outer join user u on(u.id = b.user_id)
            left outer join like_count lc on(lc.board_id = b.id)
        where
            1 = 1
            <if test='option.equals("all")'>
                and (
                    b.title like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                    or u.username like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                )
            </if>
            <if test='option.equals("title")'>
                and b.title like concat('%', trim(ifnull(#{searchValue}, '')), '%')
            </if>
            <if test='option.equals("writer")'>
                and u.username like concat('%', trim(ifnull(#{searchValue}, '')), '%')
            </if>
<!--            <choose>-->
<!--                <when test='option.equals("title"'></when>-->
<!--                <when test='option.equals("writer")'></when>-->
<!--                <otherwise>-->
<!--                    and (-->
<!--                        b.title like concat('%', #{searchValue}, '%')-->
<!--                        or u.username like concat('%', #{searchValue}, '%')-->
<!--                    )-->
<!--                </otherwise>-->
<!--            </choose>  // if문 대신 쓴 choose함수 > choose보다 if를 쓰는 것을 허용  -->
        order by
            b.id desc
        limit #{startIndex}, #{limit}
    </select>
    <select id="getCountAllBySearch" resultType="java.lang.Integer">
        select
            count(*)
        from
            board b
            left outer join user u on(u.id = b.user_id)
        where
            1 = 1
            <if test='option.equals("all")'>
                and (
                    b.title like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                    or u.username like concat('%', trim(ifnull(#{searchValue}, '')), '%')
                )
            </if>
            <if test='option.equals("title")'>
                and b.title like concat('%', trim(ifnull(#{searchValue}, '')), '%')
            </if>
            <if test='option.equals("writer")'>
                and u.username like concat('%', trim(ifnull(#{searchValue}, '')), '%')
            </if>
    </select>
</mapper>